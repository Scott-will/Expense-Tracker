/* tslint:disable */
/* eslint-disable */
/**
 * Expense Tracker
 * Simple Expense Tracker
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Expense
 */
export interface Expense {
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    'CategoryId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    'Amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'Date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface ExpenseCategory
 */
export interface ExpenseCategory {
    /**
     * 
     * @type {string}
     * @memberof ExpenseCategory
     */
    'Category': string;
    /**
     * 
     * @type {number}
     * @memberof ExpenseCategory
     */
    'Id'?: number;
}

/**
 * ExpenseCategoriesApi - axios parameter creator
 * @export
 */
export const ExpenseCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add new expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenseCategory: async (expenseCategory: ExpenseCategory, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseCategory' is not null or undefined
            assertParamExists('addExpenseCategory', 'expenseCategory', expenseCategory)
            const localVarPath = `/expense-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an expense Category
         * @param {number} id Id of Expense Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseCategory: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExpenseCategory', 'id', id)
            const localVarPath = `/expense-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Expense Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expense-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseCategory: async (expenseCategory: ExpenseCategory, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseCategory' is not null or undefined
            assertParamExists('updateExpenseCategory', 'expenseCategory', expenseCategory)
            const localVarPath = `/expense-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseCategoriesApi - functional programming interface
 * @export
 */
export const ExpenseCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add new expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExpenseCategory(expenseCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseCategoriesApi.addExpenseCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an expense Category
         * @param {number} id Id of Expense Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExpenseCategory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpenseCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseCategoriesApi.deleteExpenseCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Expense Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseCategoriesApi.getExpenseCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpenseCategory(expenseCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseCategoriesApi.updateExpenseCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExpenseCategoriesApi - factory interface
 * @export
 */
export const ExpenseCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseCategoriesApiFp(configuration)
    return {
        /**
         * Add new expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addExpenseCategory(expenseCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an expense Category
         * @param {number} id Id of Expense Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseCategory(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExpenseCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Expense Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExpenseCategory>> {
            return localVarFp.getExpenseCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an expense Category
         * @param {ExpenseCategory} expenseCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExpenseCategory(expenseCategory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExpenseCategoriesApi - object-oriented interface
 * @export
 * @class ExpenseCategoriesApi
 * @extends {BaseAPI}
 */
export class ExpenseCategoriesApi extends BaseAPI {
    /**
     * Add new expense Category
     * @param {ExpenseCategory} expenseCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseCategoriesApi
     */
    public addExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig) {
        return ExpenseCategoriesApiFp(this.configuration).addExpenseCategory(expenseCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an expense Category
     * @param {number} id Id of Expense Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseCategoriesApi
     */
    public deleteExpenseCategory(id: number, options?: RawAxiosRequestConfig) {
        return ExpenseCategoriesApiFp(this.configuration).deleteExpenseCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Expense Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseCategoriesApi
     */
    public getExpenseCategories(options?: RawAxiosRequestConfig) {
        return ExpenseCategoriesApiFp(this.configuration).getExpenseCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an expense Category
     * @param {ExpenseCategory} expenseCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseCategoriesApi
     */
    public updateExpenseCategory(expenseCategory: ExpenseCategory, options?: RawAxiosRequestConfig) {
        return ExpenseCategoriesApiFp(this.configuration).updateExpenseCategory(expenseCategory, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExpensesApi - axios parameter creator
 * @export
 */
export const ExpensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add expense
         * @param {Expense} expense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpense: async (expense: Expense, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expense' is not null or undefined
            assertParamExists('addExpense', 'expense', expense)
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expense, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpensesApi - functional programming interface
 * @export
 */
export const ExpensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpensesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add expense
         * @param {Expense} expense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExpense(expense: Expense, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExpense(expense, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpensesApi.addExpense']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Expense>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpensesApi.getExpenses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExpensesApi - factory interface
 * @export
 */
export const ExpensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpensesApiFp(configuration)
    return {
        /**
         * Add expense
         * @param {Expense} expense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpense(expense: Expense, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addExpense(expense, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenses(options?: RawAxiosRequestConfig): AxiosPromise<Array<Expense>> {
            return localVarFp.getExpenses(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExpensesApi - object-oriented interface
 * @export
 * @class ExpensesApi
 * @extends {BaseAPI}
 */
export class ExpensesApi extends BaseAPI {
    /**
     * Add expense
     * @param {Expense} expense 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApi
     */
    public addExpense(expense: Expense, options?: RawAxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).addExpense(expense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of expenses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApi
     */
    public getExpenses(options?: RawAxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).getExpenses(options).then((request) => request(this.axios, this.basePath));
    }
}



